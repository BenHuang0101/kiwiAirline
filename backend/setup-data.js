// ÂâµÂª∫ÊîØÊè¥Ë≥áÊñôË°®ÂíåÂàùÂßãÊï∏Êìö
require('dotenv').config();
const mysql = require('mysql2/promise');

async function createSupportTablesAndData() {
  console.log('üöÄ ÂâµÂª∫ÊîØÊè¥Ë≥áÊñôË°®ÂíåÂàùÂßãÊï∏Êìö...');
  
  const connection = await mysql.createConnection({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '388062531',
    database: process.env.DB_NAME || 'kiwiairline',
    port: process.env.DB_PORT || 3306
  });

  try {
    // 1. ÂâµÂª∫Â∏∏Ë¶ãÂïèÈ°åË°®
    console.log('1Ô∏è‚É£ ÂâµÂª∫Â∏∏Ë¶ãÂïèÈ°åË°®...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS faqs (
        faq_id INT PRIMARY KEY AUTO_INCREMENT,
        category ENUM('booking', 'cancellation', 'refund', 'flight_info', 'special_assistance', 'baggage', 'technical', 'feedback', 'other') NOT NULL,
        question TEXT NOT NULL,
        answer TEXT NOT NULL,
        display_order INT DEFAULT 0,
        is_featured BOOLEAN DEFAULT FALSE,
        is_active BOOLEAN DEFAULT TRUE,
        view_count INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_category (category),
        INDEX idx_featured (is_featured),
        INDEX idx_active (is_active),
        INDEX idx_display_order (display_order)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);
    console.log('‚úÖ Â∏∏Ë¶ãÂïèÈ°åË°®ÂâµÂª∫ÊàêÂäü');

    // 2. ÂâµÂª∫ËÅØÁµ°Ë´ãÊ±ÇË°®
    console.log('2Ô∏è‚É£ ÂâµÂª∫ËÅØÁµ°Ë´ãÊ±ÇË°®...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS contact_requests (
        request_id INT PRIMARY KEY AUTO_INCREMENT,
        user_id INT NULL,
        inquiry_number VARCHAR(20) UNIQUE NOT NULL,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(255) NOT NULL,
        phone VARCHAR(20),
        subject VARCHAR(200) NOT NULL,
        category ENUM('booking', 'cancellation', 'refund', 'flight_info', 'special_assistance', 'baggage', 'technical', 'feedback', 'other') NOT NULL,
        message TEXT NOT NULL,
        booking_number VARCHAR(20),
        priority ENUM('low', 'normal', 'high', 'urgent') DEFAULT 'normal',
        status ENUM('new', 'in_progress', 'waiting_for_customer', 'resolved', 'closed') DEFAULT 'new',
        admin_response TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        responded_at TIMESTAMP NULL,
        resolved_at TIMESTAMP NULL,
        INDEX idx_inquiry_number (inquiry_number),
        INDEX idx_user_id (user_id),
        INDEX idx_category (category),
        INDEX idx_status (status),
        INDEX idx_priority (priority),
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);
    console.log('‚úÖ ËÅØÁµ°Ë´ãÊ±ÇË°®ÂâµÂª∫ÊàêÂäü');

    // 3. ÂâµÂª∫Â∫ß‰ΩçË°®
    console.log('3Ô∏è‚É£ ÂâµÂª∫Â∫ß‰ΩçË°®...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS seats (
        seat_id INT PRIMARY KEY AUTO_INCREMENT,
        flight_id INT NOT NULL,
        seat_number VARCHAR(5) NOT NULL,
        seat_class ENUM('economy', 'premium_economy', 'business', 'first') DEFAULT 'economy',
        is_available BOOLEAN DEFAULT TRUE,
        is_window BOOLEAN DEFAULT FALSE,
        is_aisle BOOLEAN DEFAULT FALSE,
        extra_cost DECIMAL(8, 2) DEFAULT 0.00,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_flight_id (flight_id),
        INDEX idx_seat_number (seat_number),
        INDEX idx_available (is_available),
        INDEX idx_class (seat_class),
        UNIQUE KEY unique_flight_seat (flight_id, seat_number),
        FOREIGN KEY (flight_id) REFERENCES flights(flight_id) ON DELETE CASCADE
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);
    console.log('‚úÖ Â∫ß‰ΩçË°®ÂâµÂª∫ÊàêÂäü');

    // 4. ÊèíÂÖ•Ê©üÂ†¥ÂàùÂßãÊï∏Êìö
    console.log('4Ô∏è‚É£ ÊèíÂÖ•Ê©üÂ†¥ÂàùÂßãÊï∏Êìö...');
    const airports = [
      ['TPE', 'Ê°ÉÂúíÂúãÈöõÊ©üÂ†¥', 'Âè∞Âåó', 'Âè∞ÁÅ£', 'Asia/Taipei', 25.0777, 121.2328],
      ['TSA', 'Âè∞ÂåóÊùæÂ±±Ê©üÂ†¥', 'Âè∞Âåó', 'Âè∞ÁÅ£', 'Asia/Taipei', 25.0694, 121.5519],
      ['KHH', 'È´òÈõÑÂúãÈöõÊ©üÂ†¥', 'È´òÈõÑ', 'Âè∞ÁÅ£', 'Asia/Taipei', 22.5771, 120.3498],
      ['NRT', 'ÊàêÁî∞ÂúãÈöõÊ©üÂ†¥', 'Êù±‰∫¨', 'Êó•Êú¨', 'Asia/Tokyo', 35.7647, 140.3864],
      ['HND', 'ÁæΩÁî∞Ê©üÂ†¥', 'Êù±‰∫¨', 'Êó•Êú¨', 'Asia/Tokyo', 35.5494, 139.7798],
      ['ICN', '‰ªÅÂ∑ùÂúãÈöõÊ©üÂ†¥', 'È¶ñÁàæ', 'ÂçóÈüì', 'Asia/Seoul', 37.4602, 126.4407],
      ['HKG', 'È¶ôÊ∏ØÂúãÈöõÊ©üÂ†¥', 'È¶ôÊ∏Ø', 'È¶ôÊ∏Ø', 'Asia/Hong_Kong', 22.3080, 113.9185],
      ['SIN', 'Ê®üÂÆúÊ©üÂ†¥', 'Êñ∞Âä†Âù°', 'Êñ∞Âä†Âù°', 'Asia/Singapore', 1.3644, 103.9915],
      ['BKK', 'ËòáÂá°Á¥çÂ∏ÉÊ©üÂ†¥', 'ÊõºË∞∑', 'Ê≥∞Âúã', 'Asia/Bangkok', 13.6900, 100.7501],
      ['KUL', 'ÂêâÈöÜÂù°ÂúãÈöõÊ©üÂ†¥', 'ÂêâÈöÜÂù°', 'È¶¨‰æÜË•ø‰∫û', 'Asia/Kuala_Lumpur', 2.7456, 101.7072],
      ['LAX', 'Ê¥õÊùâÁ£ØÂúãÈöõÊ©üÂ†¥', 'Ê¥õÊùâÁ£Ø', 'ÁæéÂúã', 'America/Los_Angeles', 33.9425, -118.4081],
      ['SFO', 'ËàäÈáëÂ±±ÂúãÈöõÊ©üÂ†¥', 'ËàäÈáëÂ±±', 'ÁæéÂúã', 'America/Los_Angeles', 37.6213, -122.3790],
      ['LHR', 'Â∏åÊñØÊ¥õÊ©üÂ†¥', 'ÂÄ´Êï¶', 'Ëã±Âúã', 'Europe/London', 51.4700, -0.4543],
      ['CDG', 'Êà¥È´òÊ®ÇÊ©üÂ†¥', 'Â∑¥Èªé', 'Ê≥ïÂúã', 'Europe/Paris', 49.0097, 2.5479],
      ['FRA', 'Ê≥ïËò≠ÂÖãÁ¶èÊ©üÂ†¥', 'Ê≥ïËò≠ÂÖãÁ¶è', 'Âæ∑Âúã', 'Europe/Berlin', 50.0379, 8.5622]
    ];

    for (const airport of airports) {
      await connection.execute(`
        INSERT IGNORE INTO airports (airport_code, airport_name, city, country, timezone, latitude, longitude)
        VALUES (?, ?, ?, ?, ?, ?, ?)
      `, airport);
    }
    console.log('‚úÖ Ê©üÂ†¥Êï∏ÊìöÊèíÂÖ•ÊàêÂäü');

    // 5. ÊèíÂÖ•Â∏∏Ë¶ãÂïèÈ°åÂàùÂßãÊï∏Êìö
    console.log('5Ô∏è‚É£ ÊèíÂÖ•Â∏∏Ë¶ãÂïèÈ°åÂàùÂßãÊï∏Êìö...');
    const faqs = [
      ['booking', 'Â¶Ç‰ΩïÈ†êË®ÇÊ©üÁ•®Ôºü', 'ÊÇ®ÂèØ‰ª•Âú®ÊàëÂÄëÁöÑÁ∂≤Á´ô‰∏äÊêúÂ∞ãËà™Áè≠ÔºåÈÅ∏ÊìáÂêàÈÅ©ÁöÑËà™Áè≠ÂæåÂ°´ÂØ´‰πòÂÆ¢Ë≥áË®ä‰∏¶ÂÆåÊàê‰ªòÊ¨æÂç≥ÂèØ„ÄÇ', 1, true],
      ['booking', 'ÂèØ‰ª•ÁÇ∫‰ªñ‰∫∫È†êË®ÇÊ©üÁ•®ÂóéÔºü', 'ÂèØ‰ª•ÔºåÊÇ®ÂèØ‰ª•Âú®È†êË®ÇÊôÇÂ°´ÂØ´ÂÖ∂‰ªñ‰πòÂÆ¢ÁöÑË≥áË®ä„ÄÇË´ãÁ¢∫‰øùÊâÄÊúâË≥áË®äÊ∫ñÁ¢∫ÁÑ°Ë™§„ÄÇ', 2, true],
      ['booking', 'È†êË®ÇÂæåÂèØ‰ª•‰øÆÊîπ‰πòÂÆ¢Ë≥áË®äÂóéÔºü', 'ÈÉ®ÂàÜË≥áË®äÂèØ‰ª•‰øÆÊîπÔºåÂ¶ÇËÅØÁµ°ÊñπÂºè„ÄÇÂßìÂêçÁ≠âÈáçË¶ÅË≥áË®ä‰øÆÊîπÂèØËÉΩÈúÄË¶ÅÈ°çÂ§ñË≤ªÁî®ÔºåË´ãËÅØÁµ°ÂÆ¢Êúç„ÄÇ', 3, false],
      ['cancellation', 'Â¶Ç‰ΩïÂèñÊ∂àÊ©üÁ•®Ôºü', 'ÁôªÂÖ•ÊÇ®ÁöÑÂ∏≥Êà∂ÔºåÂú®„ÄåÊàëÁöÑÈ†êË®Ç„Äç‰∏≠ÊâæÂà∞Ë¶ÅÂèñÊ∂àÁöÑË®ÇÂñÆÔºåÈªûÊìäÂèñÊ∂àÂç≥ÂèØ„ÄÇË´ãÊ≥®ÊÑèÂèñÊ∂àÊîøÁ≠ñ„ÄÇ', 1, true],
      ['cancellation', 'ÂèñÊ∂àÊ©üÁ•®ÈúÄË¶ÅÊâãÁ∫åË≤ªÂóéÔºü', 'Ê†πÊìöÁ•®Á®ÆÂíåÂèñÊ∂àÊôÇÈñìÔºåÂèØËÉΩÊúÉÊî∂ÂèñÊâãÁ∫åË≤ª„ÄÇË©≥Á¥∞Ë¶èÂÆöË´ãÊü•ÁúãË®ÇÁ•®Ê¢ùÊ¨æ„ÄÇ', 2, true],
      ['refund', 'ÈÄÄÊ¨æÈúÄË¶ÅÂ§ö‰πÖÊôÇÈñìÔºü', 'ÈÄÄÊ¨æÈÄöÂ∏∏ÈúÄË¶Å3-5ÂÄãÂ∑•‰ΩúÊó•ËôïÁêÜÔºåÂØ¶ÈöõÂà∞Â∏≥ÊôÇÈñìË¶ñÊÇ®ÁöÑÈäÄË°åËÄåÂÆö„ÄÇ', 1, true],
      ['refund', 'ÈÄÄÊ¨æÈáëÈ°çÂ¶Ç‰ΩïË®àÁÆóÔºü', 'ÈÄÄÊ¨æÈáëÈ°ç=Á•®ÂÉπ-ÊâãÁ∫åË≤ª-ÂÖ∂‰ªñË≤ªÁî®„ÄÇÂÖ∑È´îÈáëÈ°çÊúÉÂú®ÈÄÄÊ¨æÊôÇÈ°ØÁ§∫„ÄÇ', 2, false],
      ['flight_info', 'Â¶Ç‰ΩïÊü•Ë©¢Ëà™Áè≠ÁãÄÊÖãÔºü', 'ÊÇ®ÂèØ‰ª•Âú®ÂÆòÁ∂≤È¶ñÈ†ÅËº∏ÂÖ•Ëà™Áè≠ËôüÊü•Ë©¢Âç≥ÊôÇÁãÄÊÖãÔºåÊàñÂú®„ÄåÊàëÁöÑÈ†êË®Ç„Äç‰∏≠Êü•Áúã„ÄÇ', 1, true],
      ['flight_info', 'Ëà™Áè≠Âª∂Ë™§ÊàñÂèñÊ∂àÊÄéÈ∫ºËæ¶Ôºü', 'ÊàëÂÄëÊúÉ‰∏ªÂãïÈÄöÁü•ÊÇ®‰∏¶ÂçîÂä©ÊîπÁ∞ΩÊàñÈÄÄÊ¨æ„ÄÇÊÇ®‰πüÂèØ‰ª•ËÅØÁµ°ÂÆ¢ÊúçËôïÁêÜ„ÄÇ', 2, true],
      ['baggage', 'Ë°åÊùéË¶èÂÆöÊòØ‰ªÄÈ∫ºÔºü', 'Á∂ìÊøüËâôÂÖçË≤ªÊâòÈÅãË°åÊùé23kgÔºåÊâãÊèêË°åÊùé7kg„ÄÇË∂ÖÈáçÈúÄÈ°çÂ§ñ‰ªòË≤ª„ÄÇ', 1, true],
      ['baggage', 'Âç±Èö™Áâ©ÂìÅÂèØ‰ª•Â∏∂‰∏äÈ£õÊ©üÂóéÔºü', 'Âö¥Á¶ÅÊîúÂ∏∂ÊòìÁáÉÊòìÁàÜÁ≠âÂç±Èö™Áâ©ÂìÅ„ÄÇË©≥Á¥∞Ê∏ÖÂñÆË´ãÊü•ÁúãÂÆâÂÖ®È†àÁü•„ÄÇ', 2, false],
      ['special_assistance', 'ÈúÄË¶ÅÁâπÊÆäÂçîÂä©Â¶Ç‰ΩïÁî≥Ë´ãÔºü', 'È†êË®ÇÊôÇÂèØÈÅ∏ÊìáÁâπÊÆäÈúÄÊ±ÇÔºåÊàñÊèêÂâç48Â∞èÊôÇËÅØÁµ°ÂÆ¢ÊúçÂÆâÊéí„ÄÇ', 1, false],
      ['technical', 'Á∂≤Á´ôÁÑ°Ê≥ïÊ≠£Â∏∏‰ΩøÁî®ÊÄéÈ∫ºËæ¶Ôºü', 'Ë´ãÂòóË©¶Ê∏ÖÈô§ÁÄèË¶ΩÂô®Âø´ÂèñÊàñ‰ΩøÁî®ÂÖ∂‰ªñÁÄèË¶ΩÂô®„ÄÇÂ¶Ç‰ªçÊúâÂïèÈ°åË´ãËÅØÁµ°ÊäÄË°ìÊîØÊè¥„ÄÇ', 1, false]
    ];

    for (const faq of faqs) {
      await connection.execute(`
        INSERT INTO faqs (category, question, answer, display_order, is_featured)
        VALUES (?, ?, ?, ?, ?)
      `, faq);
    }
    console.log('‚úÖ Â∏∏Ë¶ãÂïèÈ°åÊï∏ÊìöÊèíÂÖ•ÊàêÂäü');

    // 6. ÊèíÂÖ•ÁØÑ‰æãËà™Áè≠Êï∏Êìö
    console.log('6Ô∏è‚É£ ÊèíÂÖ•ÁØÑ‰æãËà™Áè≠Êï∏Êìö...');
    
    // ÂÖàÁç≤ÂèñÊ©üÂ†¥ID
    const airportIds = await connection.execute(`
      SELECT airport_id, airport_code FROM airports 
      WHERE airport_code IN ('TPE', 'NRT', 'ICN', 'HKG', 'SIN', 'BKK')
    `);
    
    const airportMap = {};
    airportIds[0].forEach(airport => {
      airportMap[airport.airport_code] = airport.airport_id;
    });

    // ÂâµÂª∫‰∏Ä‰∫õÁØÑ‰æãËà™Áè≠ÔºàÊú™‰æÜ7Â§©Ôºâ
    const flights = [
      // TPE to NRT
      ['KW101', airportMap['TPE'], airportMap['NRT'], '2025-07-19 08:00:00', '2025-07-19 12:30:00', 12500, 'TWD', 150, 180, 'A320', 'A1'],
      ['KW102', airportMap['NRT'], airportMap['TPE'], '2025-07-19 14:00:00', '2025-07-19 17:30:00', 12500, 'TWD', 145, 180, 'A320', 'B2'],
      
      // TPE to ICN
      ['KW201', airportMap['TPE'], airportMap['ICN'], '2025-07-20 09:00:00', '2025-07-20 12:45:00', 8500, 'TWD', 160, 180, 'B737', 'C3'],
      ['KW202', airportMap['ICN'], airportMap['TPE'], '2025-07-20 15:00:00', '2025-07-20 18:30:00', 8500, 'TWD', 155, 180, 'B737', 'D4'],
      
      // TPE to HKG
      ['KW301', airportMap['TPE'], airportMap['HKG'], '2025-07-21 10:00:00', '2025-07-21 12:00:00', 6500, 'TWD', 170, 180, 'A321', 'E5'],
      ['KW302', airportMap['HKG'], airportMap['TPE'], '2025-07-21 16:00:00', '2025-07-21 18:15:00', 6500, 'TWD', 165, 180, 'A321', 'F6'],
      
      // TPE to SIN
      ['KW401', airportMap['TPE'], airportMap['SIN'], '2025-07-22 11:00:00', '2025-07-22 15:45:00', 15500, 'TWD', 140, 180, 'B787', 'G7'],
      ['KW402', airportMap['SIN'], airportMap['TPE'], '2025-07-22 18:00:00', '2025-07-22 22:45:00', 15500, 'TWD', 135, 180, 'B787', 'H8'],
      
      // TPE to BKK
      ['KW501', airportMap['TPE'], airportMap['BKK'], '2025-07-23 12:00:00', '2025-07-23 15:30:00', 11500, 'TWD', 175, 180, 'A330', 'I9'],
      ['KW502', airportMap['BKK'], airportMap['TPE'], '2025-07-23 19:00:00', '2025-07-23 23:45:00', 11500, 'TWD', 170, 180, 'A330', 'J10']
    ];

    for (const flight of flights) {
      await connection.execute(`
        INSERT INTO flights (
          flight_number, departure_airport_id, arrival_airport_id, 
          departure_datetime, arrival_datetime, base_price, currency,
          available_seats, total_seats, aircraft_type, gate
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `, flight);
    }
    console.log('‚úÖ Ëà™Áè≠Êï∏ÊìöÊèíÂÖ•ÊàêÂäü');

    // Ê™¢Êü•ÂâµÂª∫ÁöÑË°®Ê†ºÂíåÊï∏Êìö
    console.log('7Ô∏è‚É£ Ê™¢Êü•Êï∏ÊìöÂ∫´ÁãÄÊÖã...');
    const [tables] = await connection.execute('SHOW TABLES');
    console.log('üìã Ë≥áÊñôË°®:', tables.map(table => Object.values(table)[0]));

    const [airportCount] = await connection.execute('SELECT COUNT(*) as count FROM airports');
    const [flightCount] = await connection.execute('SELECT COUNT(*) as count FROM flights');
    const [faqCount] = await connection.execute('SELECT COUNT(*) as count FROM faqs');

    console.log(`üìä Ê©üÂ†¥Êï∏Èáè: ${airportCount[0].count}`);
    console.log(`üìä Ëà™Áè≠Êï∏Èáè: ${flightCount[0].count}`);
    console.log(`üìä FAQÊï∏Èáè: ${faqCount[0].count}`);

    await connection.end();
    console.log('üéâ ÊîØÊè¥Ë≥áÊñôË°®ÂíåÂàùÂßãÊï∏ÊìöÂâµÂª∫ÂÆåÊàêÔºÅ');
    
    return true;
  } catch (error) {
    console.error('‚ùå ÂâµÂª∫ÊîØÊè¥Ë≥áÊñôÂ§±Êïó:', error.message);
    console.error(error);
    await connection.end();
    return false;
  }
}

// Âü∑Ë°åÂâµÂª∫
createSupportTablesAndData()
  .then(success => {
    if (success) {
      console.log('\nüöÄ ÊâÄÊúâÂæåÁ´ØË≥áÊñôÊ∫ñÂÇôÂÆåÊàêÔºÅÂèØ‰ª•ÂïüÂãïÊúçÂãôÂô®‰∫Ü');
    } else {
      console.log('\n‚ö†Ô∏è Ë≥áÊñôÊ∫ñÂÇôÂ§±Êïó');
    }
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå ËÖ≥Êú¨Âü∑Ë°åÂ§±Êïó:', error);
    process.exit(1);
  });
